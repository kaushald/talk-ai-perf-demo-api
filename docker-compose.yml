version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: demo-postgres
    environment:
      POSTGRES_DB: perftest
      POSTGRES_USER: user
      POSTGRES_PASSWORD: pass
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d perftest"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: demo-redis
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: demo-app
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: development
      PORT: 3000
      DATABASE_URL: postgresql://user:pass@postgres:5432/perftest
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_NAME: perftest
      DATABASE_USER: user
      POSTGRES_PASSWORD: pass
      REDIS_URL: redis://redis:6379
      REDIS_HOST: redis
      REDIS_PORT: 6379
      # Feature flags
      ENABLE_DETAILED_RELATIONS: "true"
      ENABLE_AUDIT_HISTORY: "true"
      ENABLE_SMART_SEARCH: "true"
      ENABLE_IMAGE_OPTIMIZATION: "true"
      ENABLE_CONNECTION_POOLING: "true"
      ENABLE_MISSING_INDEXES: "false"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./src:/app/src
      - ./scripts:/app/scripts
    command: npm run dev

  prometheus:
    image: prom/prometheus:latest
    container_name: demo-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'

  grafana:
    image: grafana/grafana:latest
    container_name: demo-grafana
    ports:
      - "3009:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: false
      GF_INSTALL_PLUGINS: ""
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus

volumes:
  postgres_data:
  prometheus_data:
  grafana_data: