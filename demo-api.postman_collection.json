{
	"info": {
		"_postman_id": "demo-ecommerce-api",
		"name": "Demo E-commerce API - Performance Testing",
		"description": "Complete API collection for the Demo E-commerce API with advanced features for conference demonstrations.\n\n**Test Credentials:**\n- Username: testuser\n- Password: password123\n\n**Base URL:** http://localhost:3000\n\n**Features Included:**\n- Detailed Relationship Loading\n- Audit History Tracking\n- Smart Search Algorithms\n- Image Processing Optimization\n- Advanced Connection Pooling",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Health & Metrics",
			"item": [
				{
					"name": "Health Check",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/health",
							"host": ["{{baseUrl}}"],
							"path": ["health"]
						}
					},
					"response": []
				},
				{
					"name": "API Info",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/",
							"host": ["{{baseUrl}}"]
						}
					},
					"response": []
				},
				{
					"name": "Prometheus Metrics",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/metrics",
							"host": ["{{baseUrl}}"],
							"path": ["metrics"]
						}
					},
					"response": []
				},
				{
					"name": "Memory Leak Status",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/memory-leak",
							"host": ["{{baseUrl}}"],
							"path": ["api", "memory-leak"]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "Login (Test User)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('userId', response.user.id);",
									"    pm.environment.set('username', response.user.username);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"testuser\",\n  \"password\": \"password123\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/users/login",
							"host": ["{{baseUrl}}"],
							"path": ["api", "users", "login"]
						}
					},
					"response": []
				},
				{
					"name": "Create User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('newUserId', response.id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"newuser{{$randomInt}}\",\n  \"email\": \"user{{$randomInt}}@example.com\",\n  \"password\": \"password123\",\n  \"firstName\": \"{{$randomFirstName}}\",\n  \"lastName\": \"{{$randomLastName}}\",\n  \"address\": {\n    \"street\": \"{{$randomStreetAddress}}\",\n    \"city\": \"{{$randomCity}}\",\n    \"state\": \"CA\",\n    \"zip\": \"{{$randomZipCode}}\",\n    \"country\": \"USA\"\n  },\n  \"phoneNumber\": \"{{$randomPhoneNumber}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/users",
							"host": ["{{baseUrl}}"],
							"path": ["api", "users"]
						}
					},
					"response": []
				},
				{
					"name": "List Users (Paginated)",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/users?page=1&limit=10&active=true",
							"host": ["{{baseUrl}}"],
							"path": ["api", "users"],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "10"
								},
								{
									"key": "active",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User by ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/users/{{userId}}",
							"host": ["{{baseUrl}}"],
							"path": ["api", "users", "{{userId}}"]
						}
					},
					"response": []
				},
				{
					"name": "Update User",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"{{$randomFirstName}}\",\n  \"lastName\": \"{{$randomLastName}}\",\n  \"phoneNumber\": \"{{$randomPhoneNumber}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/users/{{userId}}",
							"host": ["{{baseUrl}}"],
							"path": ["api", "users", "{{userId}}"]
						}
					},
					"response": []
				},
				{
					"name": "Deactivate User",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/users/{{newUserId}}",
							"host": ["{{baseUrl}}"],
							"path": ["api", "users", "{{newUserId}}"]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Categories",
			"item": [
				{
					"name": "List All Categories",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    if (response.categories && response.categories.length > 0) {",
									"        // Set first category as default",
									"        pm.environment.set('categoryId', response.categories[0].id);",
									"        ",
									"        // Log all categories for reference",
									"        console.log('Available Categories:');",
									"        response.categories.forEach(cat => {",
									"            console.log(`  ${cat.name}: ${cat.id}`);",
									"        });",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/categories",
							"host": ["{{baseUrl}}"],
							"path": ["api", "categories"]
						}
					},
					"response": []
				},
				{
					"name": "Get Category by ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/categories/{{categoryId}}",
							"host": ["{{baseUrl}}"],
							"path": ["api", "categories", "{{categoryId}}"]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Products",
			"item": [
				{
					"name": "List Products (Detailed Relations)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    if (response.products && response.products.length > 0) {",
									"        pm.environment.set('productId', response.products[0].id);",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/products?page=1&limit=20",
							"host": ["{{baseUrl}}"],
							"path": ["api", "products"],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "20"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Products (Smart Algorithm)",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/products/search?query=phone&minPrice=100&maxPrice=500",
							"host": ["{{baseUrl}}"],
							"path": ["api", "products", "search"],
							"query": [
								{
									"key": "query",
									"value": "phone"
								},
								{
									"key": "minPrice",
									"value": "100"
								},
								{
									"key": "maxPrice",
									"value": "500"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Product by ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/products/{{productId}}",
							"host": ["{{baseUrl}}"],
							"path": ["api", "products", "{{productId}}"]
						}
					},
					"response": []
				},
				{
					"name": "Create Product (Image Optimization)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('newProductId', response.id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{$randomProductName}}\",\n  \"description\": \"{{$randomProductMaterial}} {{$randomProductAdjective}} product for testing\",\n  \"price\": \"{{$randomPrice}}\",\n  \"stock\": {{$randomInt}},\n  \"categoryId\": \"{{categoryId}}\",\n  \"imageUrl\": \"https://picsum.photos/400/300\",\n  \"specifications\": {\n    \"weight\": \"{{$randomFloat}} kg\",\n    \"color\": \"{{$randomColor}}\",\n    \"material\": \"{{$randomProductMaterial}}\"\n  },\n  \"tags\": [\"new\", \"featured\"]\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/products",
							"host": ["{{baseUrl}}"],
							"path": ["api", "products"]
						}
					},
					"response": []
				},
				{
					"name": "Update Product",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Updated {{$randomProductName}}\",\n  \"price\": \"{{$randomPrice}}\",\n  \"stock\": {{$randomInt}}\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/products/{{newProductId}}",
							"host": ["{{baseUrl}}"],
							"path": ["api", "products", "{{newProductId}}"]
						}
					},
					"response": []
				},
				{
					"name": "Delete Product",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/products/{{newProductId}}",
							"host": ["{{baseUrl}}"],
							"path": ["api", "products", "{{newProductId}}"]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Orders",
			"item": [
				{
					"name": "Create Order (Audit History)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('orderId', response.id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userId\": \"{{userId}}\",\n  \"items\": [\n    {\n      \"productId\": \"{{productId}}\",\n      \"quantity\": 2\n    }\n  ],\n  \"shippingAddress\": {\n    \"street\": \"{{$randomStreetAddress}}\",\n    \"city\": \"{{$randomCity}}\",\n    \"state\": \"CA\",\n    \"zip\": \"{{$randomZipCode}}\",\n    \"country\": \"USA\"\n  },\n  \"paymentMethod\": \"credit_card\",\n  \"notes\": \"Test order from Postman\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/orders",
							"host": ["{{baseUrl}}"],
							"path": ["api", "orders"]
						}
					},
					"response": []
				},
				{
					"name": "List All Orders",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/orders?page=1&limit=10&status=pending",
							"host": ["{{baseUrl}}"],
							"path": ["api", "orders"],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "10"
								},
								{
									"key": "status",
									"value": "pending",
									"description": "pending, processing, shipped, delivered, cancelled"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Order by ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/orders/{{orderId}}",
							"host": ["{{baseUrl}}"],
							"path": ["api", "orders", "{{orderId}}"]
						}
					},
					"response": []
				},
				{
					"name": "Get User Orders",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/orders/user/{{userId}}?page=1&limit=5",
							"host": ["{{baseUrl}}"],
							"path": ["api", "orders", "user", "{{userId}}"],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Order Status",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"status\": \"processing\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/orders/{{orderId}}/status",
							"host": ["{{baseUrl}}"],
							"path": ["api", "orders", "{{orderId}}", "status"]
						}
					},
					"response": []
				},
				{
					"name": "Cancel Order",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/orders/{{orderId}}",
							"host": ["{{baseUrl}}"],
							"path": ["api", "orders", "{{orderId}}"]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Performance Testing",
			"item": [
				{
					"name": "Trigger Multiple Orders (Audit Tracking)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userId\": \"{{userId}}\",\n  \"items\": [\n    {\n      \"productId\": \"{{productId}}\",\n      \"quantity\": 1\n    }\n  ],\n  \"shippingAddress\": {\n    \"street\": \"Memory Leak Test Street\",\n    \"city\": \"Test City\",\n    \"state\": \"CA\",\n    \"zip\": \"12345\",\n    \"country\": \"USA\"\n  },\n  \"paymentMethod\": \"credit_card\",\n  \"notes\": \"Memory leak test order {{$randomInt}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/orders",
							"host": ["{{baseUrl}}"],
							"path": ["api", "orders"]
						}
					},
					"response": []
				},
				{
					"name": "Smart Product Search (AI Algorithm)",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/products/search?query=electronics",
							"host": ["{{baseUrl}}"],
							"path": ["api", "products", "search"],
							"query": [
								{
									"key": "query",
									"value": "electronics",
									"description": "Will enable smart AI-powered search if ENABLE_SMART_SEARCH=true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Product with Image Processing (Optimized)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Heavy Processing Product\",\n  \"description\": \"This will trigger synchronous image processing\",\n  \"price\": \"299.99\",\n  \"stock\": 10,\n  \"categoryId\": \"{{categoryId}}\",\n  \"imageUrl\": \"https://picsum.photos/800/600\",\n  \"specifications\": {\n    \"processingIntensive\": true\n  }\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/products",
							"host": ["{{baseUrl}}"],
							"path": ["api", "products"]
						}
					},
					"response": []
				},
				{
					"name": "Detailed Relations Demo (Products List)",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/products?limit=50",
							"host": ["{{baseUrl}}"],
							"path": ["api", "products"],
							"query": [
								{
									"key": "limit",
									"value": "50",
									"description": "Large limit to demonstrate detailed relation loading"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Load Testing Helpers",
			"item": [
				{
					"name": "Quick Health Check",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/health",
							"host": ["{{baseUrl}}"],
							"path": ["health"]
						}
					},
					"response": []
				},
				{
					"name": "Search Redirect Test",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/search?query=test",
							"host": ["{{baseUrl}}"],
							"path": ["api", "search"],
							"query": [
								{
									"key": "query",
									"value": "test"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Bulk Order Creation",
					"event": [
						{
							"listen": "pre-request",
							"script": {
								"exec": [
									"// This script runs multiple times to create bulk orders",
									"console.log('Creating bulk order for load testing...');",
									"",
									"// Set random user from test data",
									"const userIds = [pm.environment.get('userId')];",
									"const productIds = [pm.environment.get('productId')];",
									"",
									"if (userIds[0] && productIds[0]) {",
									"    pm.environment.set('bulkUserId', userIds[0]);",
									"    pm.environment.set('bulkProductId', productIds[0]);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userId\": \"{{bulkUserId}}\",\n  \"items\": [\n    {\n      \"productId\": \"{{bulkProductId}}\",\n      \"quantity\": {{$randomInt}}\n    }\n  ],\n  \"shippingAddress\": {\n    \"street\": \"Bulk Test {{$randomInt}}\",\n    \"city\": \"Load City\",\n    \"state\": \"CA\",\n    \"zip\": \"90210\",\n    \"country\": \"USA\"\n  },\n  \"paymentMethod\": \"credit_card\",\n  \"notes\": \"Bulk load test order {{$timestamp}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/orders",
							"host": ["{{baseUrl}}"],
							"path": ["api", "orders"]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Set default base URL if not already set",
					"if (!pm.environment.get('baseUrl')) {",
					"    pm.environment.set('baseUrl', 'http://localhost:3000');",
					"}",
					"",
					"// Set default categoryId if not set (you may need to update this)",
					"if (!pm.environment.get('categoryId')) {",
					"    pm.environment.set('categoryId', '06f7bc0a-8163-4d51-9e68-6d8a6b3952b2'); // Electronics category UUID",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global test to log response time",
					"console.log('Response time: ' + pm.response.responseTime + 'ms');",
					"",
					"// Log memory leak info if present",
					"if (pm.response.json() && pm.response.json().memoryLeakInfo) {",
					"    console.log('Memory leak status:', pm.response.json().memoryLeakInfo);",
					"}"
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:3000",
			"type": "string"
		},
		{
			"key": "userId",
			"value": "",
			"type": "string"
		},
		{
			"key": "productId",
			"value": "",
			"type": "string"
		},
		{
			"key": "orderId",
			"value": "",
			"type": "string"
		},
		{
			"key": "categoryId",
			"value": "06f7bc0a-8163-4d51-9e68-6d8a6b3952b2",
			"type": "string",
			"description": "Electronics category UUID"
		}
	]
}